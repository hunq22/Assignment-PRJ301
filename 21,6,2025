t·∫°o to√†n b·ªô ƒë∆∞·ª£c kh√¥ng ?


ChatGPT ƒë√£ n√≥i:
Tuy·ªát v·ªùi! D∆∞·ªõi ƒë√¢y l√† to√†n b·ªô h·ªá th·ªëng qu·∫£n l√Ω ƒë∆°n ngh·ªâ ph√©p ƒë∆°n gi·∫£n b·∫±ng Java Console g·ªìm c√°c file Java c·∫ßn thi·∫øt. M·ªói class s·∫Ω n·∫±m trong m·ªôt file ri√™ng, b·∫°n ch·ªâ c·∫ßn copy/paste ƒë√∫ng t√™n file t∆∞∆°ng ·ª©ng ƒë·ªÉ ch·∫°y to√†n b·ªô h·ªá th·ªëng.

üìÅ C·∫•u tr√∫c file
pgsql
Sao ch√©p
Ch·ªânh s·ª≠a
LeaveSystem/
‚îú‚îÄ‚îÄ LeaveSystem.java
‚îú‚îÄ‚îÄ User.java
‚îî‚îÄ‚îÄ LeaveRequest.java
‚úÖ 1. User.java
java
Sao ch√©p
Ch·ªânh s·ª≠a
public class User {
    String username;
    String password;
    String role;
    String department;
    User manager;

    public User(String username, String password, String role, String department, User manager) {
        this.username = username;
        this.password = password;
        this.role = role;
        this.department = department;
        this.manager = manager;
    }

    public boolean isManager() {
        return role.equals("Qu·∫£n l√Ω tr·ª±c ti·∫øp") || role.equals("Qu·∫£n l√Ω ph√≤ng ban");
    }

    @Override
    public String toString() {
        return username + " - " + role + " - " + department;
    }
}
‚úÖ 2. LeaveRequest.java
java
Sao ch√©p
Ch·ªânh s·ª≠a
import java.time.LocalDate;

public class LeaveRequest {
    public enum Status { INPROGRESS, APPROVED, REJECTED }

    String title;
    LocalDate fromDate;
    LocalDate toDate;
    String reason;
    User createdBy;
    User processedBy;
    Status status;

    public LeaveRequest(String title, LocalDate fromDate, LocalDate toDate, String reason, User createdBy) {
        this.title = title;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.reason = reason;
        this.createdBy = createdBy;
        this.status = Status.INPROGRESS;
    }

    @Override
    public String toString() {
        return "[" + status + "] " + title + " (" + fromDate + " -> " + toDate + "), t·∫°o b·ªüi: " +
               createdBy.username + ", x·ª≠ l√Ω b·ªüi: " +
               (processedBy != null ? processedBy.username : "ch∆∞a x·ª≠ l√Ω");
    }
}
‚úÖ 3. LeaveSystem.java
java
Sao ch√©p
Ch·ªânh s·ª≠a
import java.time.LocalDate;
import java.util.*;

public class LeaveSystem {
    private static final Scanner sc = new Scanner(System.in);
    private static final List<User> users = new ArrayList<>();
    private static final List<LeaveRequest> requests = new ArrayList<>();
    private static User currentUser = null;

    public static void main(String[] args) {
        initData();
        login();
        menu();
    }

    static void initData() {
        User manager = new User("mrB", "1234", "Qu·∫£n l√Ω tr·ª±c ti·∫øp", "IT", null);
        User head = new User("mrA", "1234", "Qu·∫£n l√Ω ph√≤ng ban", "IT", null);
        User emp1 = new User("mrF", "1234", "Nh√¢n vi√™n", "IT", manager);
        User emp2 = new User("mrE", "1234", "Nh√¢n vi√™n", "IT", manager);

        users.add(head);
        users.add(manager);
        users.add(emp1);
        users.add(emp2);
    }

    static void login() {
        while (true) {
            System.out.print("Username: ");
            String u = sc.nextLine();
            System.out.print("Password: ");
            String p = sc.nextLine();
            for (User user : users) {
                if (user.username.equals(u) && user.password.equals(p)) {
                    currentUser = user;
                    System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + user);
                    return;
                }
            }
            System.out.println("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u. Th·ª≠ l·∫°i.");
        }
    }

    static void menu() {
        while (true) {
            System.out.println("\n=== MENU ===");
            System.out.println("1. T·∫°o ƒë∆°n ngh·ªâ ph√©p");
            System.out.println("2. Xem ƒë∆°n c·ªßa t√¥i");
            if (currentUser.isManager()) {
                System.out.println("3. Xem ƒë∆°n c·ªßa c·∫•p d∆∞·ªõi");
                System.out.println("4. Duy·ªát ƒë∆°n");
            }
            if ("Qu·∫£n l√Ω ph√≤ng ban".equals(currentUser.role)) {
                System.out.println("5. Xem agenda");
            }
            System.out.println("0. Tho√°t");

            System.out.print("Ch·ªçn: ");
            int choice = Integer.parseInt(sc.nextLine());
            switch (choice) {
                case 1 -> createRequest();
                case 2 -> viewMyRequests();
                case 3 -> {
                    if (currentUser.isManager()) viewSubordinateRequests();
                }
                case 4 -> {
                    if (currentUser.isManager()) approveRequest();
                }
                case 5 -> {
                    if ("Qu·∫£n l√Ω ph√≤ng ban".equals(currentUser.role)) viewAgenda();
                }
                case 0 -> {
                    System.out.println("Tho√°t.");
                    return;
                }
                default -> System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
            }
        }
    }

    static void createRequest() {
        System.out.print("Ti√™u ƒë·ªÅ: ");
        String title = sc.nextLine();
        System.out.print("T·ª´ ng√†y (yyyy-mm-dd): ");
        LocalDate from = LocalDate.parse(sc.nextLine());
        System.out.print("T·ªõi ng√†y (yyyy-mm-dd): ");
        LocalDate to = LocalDate.parse(sc.nextLine());
        System.out.print("L√Ω do: ");
        String reason = sc.nextLine();

        LeaveRequest req = new LeaveRequest(title, from, to, reason, currentUser);
        requests.add(req);
        System.out.println("T·∫°o ƒë∆°n th√†nh c√¥ng.");
    }

    static void viewMyRequests() {
        System.out.println("--- ƒê∆°n c·ªßa t√¥i ---");
        for (LeaveRequest r : requests) {
            if (r.createdBy == currentUser) {
                System.out.println(r);
            }
        }
    }

    static void viewSubordinateRequests() {
        System.out.println("--- ƒê∆°n c·ªßa c·∫•p d∆∞·ªõi ---");
        for (LeaveRequest r : requests) {
            if (r.createdBy.manager == currentUser) {
                System.out.println(r);
            }
        }
    }

    static void approveRequest() {
        List<LeaveRequest> pending = new ArrayList<>();
        for (LeaveRequest r : requests) {
            if (r.createdBy.manager == currentUser && r.status == LeaveRequest.Status.INPROGRESS) {
                pending.add(r);
            }
        }
        if (pending.isEmpty()) {
            System.out.println("Kh√¥ng c√≥ ƒë∆°n n√†o ch·ªù x·ª≠ l√Ω.");
            return;
        }

        for (int i = 0; i < pending.size(); i++) {
            System.out.println((i + 1) + ". " + pending.get(i));
        }
        System.out.print("Ch·ªçn ƒë∆°n ƒë·ªÉ x·ª≠ l√Ω (0 ƒë·ªÉ tho√°t): ");
        int idx = Integer.parseInt(sc.nextLine());
        if (idx == 0) return;

        LeaveRequest selected = pending.get(idx - 1);
        System.out.print("Duy·ªát (a) / T·ª´ ch·ªëi (r): ");
        String act = sc.nextLine();

        if (act.equalsIgnoreCase("a")) {
            selected.status = LeaveRequest.Status.APPROVED;
        } else {
            selected.status = LeaveRequest.Status.REJECTED;
        }
        selected.processedBy = currentUser;
        System.out.println("ƒê√£ x·ª≠ l√Ω ƒë∆°n.");
    }

    static void viewAgenda() {
        System.out.println("--- Agenda (demo) ---");
        System.out.printf("%-10s %-15s\n", "Nh√¢n vi√™n", "Tr·∫°ng th√°i");
        for (User u : users) {
            if (u.department.equals(currentUser.department)) {
                boolean off = requests.stream()
                    .anyMatch(r -> r.createdBy == u && r.status == LeaveRequest.Status.APPROVED);
                System.out.printf("%-10s %-15s\n", u.username, off ? "ƒêang ngh·ªâ" : "ƒêi l√†m");
            }
        }
    }
}
üèÅ C√°ch ch·∫°y ch∆∞∆°ng tr√¨nh
T·∫°o th∆∞ m·ª•c LeaveSystem

ƒê·∫∑t 3 file .java v√†o trong

Bi√™n d·ªãch v√† ch·∫°y:

bash
Sao ch√©p
Ch·ªânh s·ª≠a
javac *.java
java LeaveSystem
B·∫°n c√≥ mu·ªën m√¨nh g√≥i to√†n b·ªô v√†o file .zip ƒë·ªÉ t·∫£i v·ªÅ? Ho·∫∑c mu·ªën n√¢ng c·∫•p l√™n giao di·ªán JavaFX/Web/Spring Boot?


2/2









